---
name: package and draft GitHub release
# https://github.com/product-os/flowzone/tree/master/.github/actions
inputs:
  json:
    description: 'JSON stringified object containing all the inputs from the calling workflow'
    required: true
  secrets:
    description: 'JSON stringified object containing all the secrets from the calling workflow'
    required: true
  variables:
    description: 'JSON stringified object containing all the variables from the calling workflow'
    required: true

  # --- custom environment
  XCODE_APP_LOADER_EMAIL:
    type: string
    default: 'accounts+apple@balena.io'
  NODE_VERSION:
    type: string
    default: '20.x'
  VERBOSE:
    type: string
    default: 'true'

runs:
  # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  using: 'composite'
  steps:
    - name: Download custom source artifact
      uses: actions/download-artifact@f44cd7b40bfd40b6aa1cc1b9b5b7bf03d3c67110 # v4.1.0
      with:
        name: custom-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}-${{ runner.os }}-${{ runner.arch }}
        path: ${{ runner.temp }}

    - name: Extract custom source artifact
      shell: pwsh
      working-directory: .
      run: tar -xf ${{ runner.temp }}/custom.tgz

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.NODE_VERSION }}
        cache: npm

    - name: Install additional tools
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install yq

    - name: Install additional tools
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install coreutils

    # https://www.electron.build/code-signing.html
    # https://github.com/Apple-Actions/import-codesign-certs
    - name: Import Apple code signing certificate
      if: runner.os == 'macOS'
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ fromJSON(inputs.secrets).APPLE_SIGNING }}
        p12-password: ${{ fromJSON(inputs.secrets).APPLE_SIGNING_PASSWORD }}

    - name: Import Windows code signing certificate
      if: runner.os == 'Windows'
      id: import_win_signing_cert
      shell: powershell
      run: |
        Set-Content -Path ${{ runner.temp }}/certificate.base64 -Value $env:WINDOWS_CERTIFICATE
        certutil -decode ${{ runner.temp }}/certificate.base64 ${{ runner.temp }}/certificate.pfx
        Remove-Item -path ${{ runner.temp }} -include certificate.base64

        Import-PfxCertificate `
          -FilePath ${{ runner.temp }}/certificate.pfx `
          -CertStoreLocation Cert:\CurrentUser\My `
          -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

        echo "certFilePath=${{ runner.temp }}/certificate.pfx" >> $GITHUB_OUTPUT
      env:
        WINDOWS_CERTIFICATE: ${{ fromJSON(inputs.secrets).WINDOWS_SIGNING }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ fromJSON(inputs.secrets).WINDOWS_SIGNING_PASSWORD }}

    # https://github.com/product-os/scripts/tree/master/shared
    # https://github.com/product-os/balena-concourse/blob/master/pipelines/github-events/template.yml
    - name: Package release
      shell: bash
      run: |
        set -ea

        [[ '${{ inputs.VERBOSE }}' =~ on|On|Yes|yes|true|True ]] && set -x

        runner_os="$(echo "${RUNNER_OS}" | tr '[:upper:]' '[:lower:]')"
        runner_arch="$(echo "${RUNNER_ARCH}" | tr '[:upper:]' '[:lower:]')"

        echo "Runner os ${runner_os} and arch ${runner_arch} detected."
        
        if [[ $runner_os =~ darwin|macos|osx ]]; then
            CSC_KEY_PASSWORD=${{ fromJSON(inputs.secrets).APPLE_SIGNING_PASSWORD }}
            CSC_KEYCHAIN=signing_temp
            CSC_LINK=${{ fromJSON(inputs.secrets).APPLE_SIGNING }}

        elif [[ $runner_os =~ windows|win ]]; then
            
            echo "the cert file path is ${{ steps.import_win_signing_cert.outputs.certFilePath }}"
            CSC_KEY_PASSWORD=${{ fromJSON(inputs.secrets).WINDOWS_SIGNING_PASSWORD }}
            CSC_LINK=${{ steps.import_win_signing_cert.outputs.certFilePath }}

            # patches/all/oclif.patch
            MSYSSHELLPATH="$(which bash)"
            MSYSTEM=MSYS

            # (signtool.exe) https://github.com/actions/runner-images/blob/main/images/win/Windows2019-Readme.md#installed-windows-sdks
            PATH="/c/Program Files (x86)/Windows Kits/10/bin/${runner_arch}:${PATH}"
        fi

        npm run package

        find dist -type f -maxdepth 1

      env:
        # https://github.blog/2020-08-03-github-actions-improvements-for-fork-and-pull-request-workflows/#improvements-for-public-repository-forks
        # https://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks#about-workflow-runs-from-public-forks
        CSC_FOR_PULL_REQUEST: true
        # https://sectigo.com/resource-library/time-stamping-server
        TIMESTAMP_SERVER: http://timestamp.sectigo.com
        # Apple notarization (automation/build-bin.ts)
        XCODE_APP_LOADER_EMAIL: ${{ inputs.XCODE_APP_LOADER_EMAIL }}
        XCODE_APP_LOADER_PASSWORD: ${{ fromJSON(inputs.secrets).XCODE_APP_LOADER_PASSWORD }}
        XCODE_APP_LOADER_TEAM_ID: ${{ inputs.XCODE_APP_LOADER_TEAM_ID }}

    - name: Upload artifacts
      uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4
      with:
        name: gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}-${{ strategy.job-index }}
        path: dist
        retention-days: 1
        if-no-files-found: error
