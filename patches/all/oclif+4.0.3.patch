diff --git a/node_modules/oclif/lib/commands/pack/macos.js b/node_modules/oclif/lib/commands/pack/macos.js
index 2aeaed7..69314cc 100644
--- a/node_modules/oclif/lib/commands/pack/macos.js
+++ b/node_modules/oclif/lib/commands/pack/macos.js
@@ -216,7 +216,8 @@ the CLI should already exist in a directory named after the CLI that is the root
             if (process.env.OSX_KEYCHAIN)
                 args.push('--keychain', process.env.OSX_KEYCHAIN);
             args.push(dist);
-            await exec(`pkgbuild  ${args.join(' ')}`);
+            console.error(`[debug] oclif pkgbuild "${args.join('" "')}"`);
+            await exec(`pkgbuild  "${args.join('" "')}"`);
         };
         const arches = (0, util_1.uniq)(buildConfig.targets.filter((t) => t.platform === 'darwin').map((t) => t.arch));
         await Promise.all(arches.map((a) => build(a)));
diff --git a/node_modules/oclif/lib/commands/pack/win.js b/node_modules/oclif/lib/commands/pack/win.js
index 663e844..d120e71 100644
--- a/node_modules/oclif/lib/commands/pack/win.js
+++ b/node_modules/oclif/lib/commands/pack/win.js
@@ -54,6 +54,12 @@ InstallDir "\$PROGRAMFILES${arch === 'x64' ? '64' : ''}\\${config.dirname}"
 ${customization}
 
 Section "${config.name} CLI \${VERSION}"
+  ; First remove any old client files.
+  ; (Remnants of old versions were causing CLI errors)
+  ; Initially tried running the Uninstall.exe, but was
+  ; unable to make script wait for completion (despite using _?)
+  DetailPrint "Removing files from previous version."
+  RMDir /r "$INSTDIR\\client"
   SetOutPath $INSTDIR
   File /r bin
   File /r client
@@ -259,8 +265,8 @@ the CLI should already exist in a directory named after the CLI that is the root
                     : []),
             ]);
             await (0, fs_extra_1.move)(buildConfig.workspace({ arch, platform: 'win32' }), path.join(installerBase, 'client'));
-            await exec(`makensis ${installerBase}/${config.bin}.nsi | grep -v "\\[compress\\]" | grep -v "^File: Descending to"`);
-            const templateKey = (0, upload_util_1.templateShortKey)('win32', {
+            const { msysExec, toMsysPath } = require("../../util");
+            await msysExec(`makensis ${toMsysPath(installerBase)}/${config.bin}.nsi | grep -v "\\[compress\\]" | grep -v "^File: Descending to"`);            const templateKey = (0, upload_util_1.templateShortKey)('win32', {
                 arch,
                 bin: config.bin,
                 sha: buildConfig.gitSha,
diff --git a/node_modules/oclif/lib/tarballs/build.js b/node_modules/oclif/lib/tarballs/build.js
index 9ced03f..4040aee 100644
--- a/node_modules/oclif/lib/tarballs/build.js
+++ b/node_modules/oclif/lib/tarballs/build.js
@@ -23,7 +23,8 @@ const pack = async (from, to) => {
         : await exec(`tar cfJ ${to} ${path.basename(from)}`, { cwd });
 };
 async function build(c, options = {}) {
-    const { config, xz } = c;
+    const { xz, config, tmp } = c;
+    console.error(`[debug] oclif c.root="${c.root}" c.workspace()="${c.workspace()}"`);
     const packCLI = async () => {
         const { stdout } = await exec('npm pack --unsafe-perm', { cwd: c.root });
         return path.join(c.root, stdout.trim().split('\n').pop());
@@ -32,7 +33,8 @@ async function build(c, options = {}) {
         await (0, fs_extra_1.emptyDir)(c.workspace());
         const tarballNewLocation = path.join(c.workspace(), path.basename(tarball));
         await (0, fs_extra_1.move)(tarball, tarballNewLocation);
-        await exec(`tar -xzf "${tarballNewLocation}"`, { cwd: c.workspace() });
+        const { msysExec, toMsysPath } = require("../util");
+        await msysExec(`tar -xzf ${toMsysPath(tarballNewLocation)}`, { cwd: c.workspace() });
         const files = await (0, promises_1.readdir)(path.join(c.workspace(), 'package'), { withFileTypes: true });
         await Promise.all(files.map((i) => (0, fs_extra_1.move)(path.join(c.workspace(), 'package', i.name), path.join(c.workspace(), i.name))));
         await Promise.all([
@@ -40,6 +42,13 @@ async function build(c, options = {}) {
             (0, promises_1.rm)(path.join(c.workspace(), path.basename(tarball)), { recursive: true }),
             (0, fs_extra_1.remove)(path.join(c.workspace(), 'bin', 'run.cmd')),
         ]);
+        // rename the original balena-cli ./bin/balena entry point for oclif compatibility
+        await fs.move(path.join(c.workspace(), 'bin', 'balena'), path.join(c.workspace(), 'bin', 'run'));
+        // The oclif installers are a production installation, while the source
+        // `bin` folder may contain a `.fast-boot.json` file of a dev installation.
+        // This has previously led to issues preventing the CLI from starting, so
+        // delete `.fast-boot.json` (if any) from the destination folder.
+        await fs.promises.rm(path.join(c.workspace(), 'bin', '.fast-boot.json'));
     };
     const updatePJSON = async () => {
         const pjsonPath = path.join(c.workspace(), 'package.json');
@@ -51,36 +60,21 @@ async function build(c, options = {}) {
         await (0, fs_extra_1.writeJSON)(pjsonPath, pjson, { spaces: 2 });
     };
     const addDependencies = async () => {
-        const yarnRoot = findYarnWorkspaceRoot(c.root) || c.root;
-        if ((0, node_fs_1.existsSync)(path.join(yarnRoot, 'yarn.lock'))) {
-            await (0, fs_extra_1.copy)(path.join(yarnRoot, 'yarn.lock'), path.join(c.workspace(), 'yarn.lock'));
-            const { stdout } = await exec('yarn -v');
-            const yarnVersion = stdout.charAt(0);
-            if (yarnVersion === '1') {
-                await exec('yarn --no-progress --production --non-interactive', { cwd: c.workspace() });
-            }
-            else if (yarnVersion === '2') {
-                throw new Error('Yarn 2 is not supported yet. Try using Yarn 1, or Yarn 3');
-            }
-            else {
-                try {
-                    await exec('yarn workspaces focus --production', { cwd: c.workspace() });
-                }
-                catch (error) {
-                    if (error instanceof Error && error.message.includes('Command not found')) {
-                        throw new Error('Missing workspace tools. Run `yarn plugin import workspace-tools`.');
-                    }
-                    throw error;
-                }
-            }
-        }
-        else {
-            const lockpath = (0, node_fs_1.existsSync)(path.join(c.root, 'package-lock.json'))
-                ? path.join(c.root, 'package-lock.json')
-                : path.join(c.root, 'npm-shrinkwrap.json');
-            await (0, fs_extra_1.copy)(lockpath, path.join(c.workspace(), path.basename(lockpath)));
-            await exec('npm install --production', { cwd: c.workspace() });
+
+        const ws = c.workspace();
+        exec(`cd ${ws}`);
+        console.error(`[debug] oclif copying node_modules to "${ws}"`)
+        const source = path.join(c.root, 'node_modules');
+        if (process.platform === 'win32') {
+            await exec(`xcopy "${source}" "${ws}\\node_modules" /S /E /B /I /K /Q /Y`);
+        } else {
+            // use the shell's `cp` on macOS in order to preserve extended
+            // file attributes containing `codesign` digital signatures
+            await exec(`cp -pR "${source}" "${ws}"`);
         }
+        console.error(`[debug] oclif running "npm prune --production" in "${ws}"`);
+        await exec('npm prune --production', { cwd: c.workspace() });
+        console.error(`[debug] oclif done`);
     };
     const pretarball = async () => {
         const pjson = await (0, fs_extra_1.readJSON)(path.join(c.workspace(), 'package.json'));
@@ -120,7 +114,8 @@ async function build(c, options = {}) {
             nodeVersion: c.nodeVersion,
             output: path.join(workspace, 'bin', 'node'),
             platform: target.platform,
-            tmp: path.join(config.root, 'tmp'),
+            tmp,
+            projectRootPath: c.root
         });
         if (options.pack === false)
             return;
@@ -165,6 +160,7 @@ async function build(c, options = {}) {
         await (0, fs_extra_1.writeJSON)(manifestFilepath, manifest, { spaces: 2 });
     };
     (0, log_1.log)(`gathering workspace for ${config.bin} to ${c.workspace()}`);
+    console.error(`[debug] ${options.tarball}`);
     await extractCLI(options.tarball ?? (await packCLI()));
     await updatePJSON();
     await addDependencies();
diff --git a/node_modules/oclif/lib/tarballs/config.js b/node_modules/oclif/lib/tarballs/config.js
index d567378..512a8ee 100644
--- a/node_modules/oclif/lib/tarballs/config.js
+++ b/node_modules/oclif/lib/tarballs/config.js
@@ -18,7 +18,10 @@ async function gitSha(cwd, options = {}) {
 }
 exports.gitSha = gitSha;
 async function Tmp(config) {
-    const tmp = path.join(config.root, 'tmp');
+    const tmp = process.env.BUILD_TMP
+        ? path.join(process.env.BUILD_TMP, 'oclif')
+        : path.join(config.root, 'tmp');
+    console.error(`[debug] oclif tmp="${tmp}"`);
     await (0, promises_1.mkdir)(tmp, { recursive: true });
     return tmp;
 }
@@ -54,7 +57,7 @@ async function buildConfig(root, options = {}) {
         tmp,
         updateConfig,
         workspace(target) {
-            const base = path.join(config.root, 'tmp');
+            const base = tmp;
             if (target && target.platform)
                 return path.join(base, [target.platform, target.arch].join('-'), (0, upload_util_1.templateShortKey)('baseDir', { bin: config.bin }));
             return path.join(base, (0, upload_util_1.templateShortKey)('baseDir', { bin: config.bin }));
diff --git a/node_modules/oclif/lib/tarballs/node.js b/node_modules/oclif/lib/tarballs/node.js
index c10c737..f345e34 100644
--- a/node_modules/oclif/lib/tarballs/node.js
+++ b/node_modules/oclif/lib/tarballs/node.js
@@ -13,6 +13,7 @@ const node_util_1 = require("node:util");
 const log_1 = require("../log");
 const util_1 = require("../util");
 const exec = (0, node_util_1.promisify)(node_child_process_1.exec);
+const { isMSYS2, msysExec, toMsysPath } = require("../util");
 const RETRY_TIMEOUT_MS = 1000;
 async function fetchNodeBinary({ arch, nodeVersion, output, platform, tmp }) {
     if (arch === 'arm')
@@ -40,8 +41,10 @@ async function fetchNodeBinary({ arch, nodeVersion, output, platform, tmp }) {
         const basedir = path.dirname(tarball);
         await (0, promises_1.mkdir)(basedir, { recursive: true });
         await (0, promises_2.pipeline)(got_1.default.stream(url), (0, node_fs_1.createWriteStream)(tarball));
-        if (platform !== 'win32')
-            await exec(`grep "${path.basename(tarball)}" "${shasums}" | shasum -a 256 -c -`, { cwd: basedir });
+        if (platform !== 'win32') {
+            const shaCmd = isMSYS2 ? 'sha256sum -c -' : 'shasum -a 256 -c -';
+            await msysExec(`grep ${path.basename(tarball)} ${toMsysPath(shasums)} | ${shaCmd}`, { cwd: basedir });
+        }
     };
     const extract = async () => {
         (0, log_1.log)(`extracting ${nodeBase}`);
@@ -49,7 +52,7 @@ async function fetchNodeBinary({ arch, nodeVersion, output, platform, tmp }) {
         await (0, promises_1.mkdir)(nodeTmp, { recursive: true });
         await (0, promises_1.mkdir)(path.dirname(cache), { recursive: true });
         if (platform === 'win32') {
-            await exec(`7z x -bd -y "${tarball}"`, { cwd: nodeTmp });
+            await msysExec(`7z x -bd -y ${toMsysPath(tarball)} > /dev/null`, { cwd: nodeTmp });
             await (0, fs_extra_1.move)(path.join(nodeTmp, nodeBase, 'node.exe'), path.join(cache, 'node.exe'));
         }
         else {
diff --git a/node_modules/oclif/lib/upload-util.js b/node_modules/oclif/lib/upload-util.js
index 61899a4..ec958f2 100644
--- a/node_modules/oclif/lib/upload-util.js
+++ b/node_modules/oclif/lib/upload-util.js
@@ -26,11 +26,11 @@ function templateShortKey(type, options) {
     const templates = {
         baseDir: '<%- bin %>',
         deb: '<%- bin %>_<%- versionShaRevision %>_<%- arch %>.deb',
-        macos: '<%- bin %>-v<%- version %>-<%- sha %>-<%- arch %>.pkg',
-        manifest: '<%- bin %>-v<%- version %>-<%- sha %>-<%- platform %>-<%- arch %>-buildmanifest',
+        macos: '<%- bin %>-v<%- version %>.pkg',
+        manifest: '<%- bin %>-v<%- version %>-<%- platform %>-<%- arch %>-buildmanifest',
         unversioned: '<%- bin %>-<%- platform %>-<%- arch %><%- ext %>',
-        versioned: '<%- bin %>-v<%- version %>-<%- sha %>-<%- platform %>-<%- arch %><%- ext %>',
-        win32: '<%- bin %>-v<%- version %>-<%- sha %>-<%- arch %>.exe',
+        versioned: '<%- bin %>-v<%- version %>-<%- platform %>-<%- arch %><%- ext %>',
+        win32: '<%- bin %>-v<%- version %>-<%- arch %>.exe',
     };
     return template(templates[type])({ ...options });
 }
diff --git a/node_modules/oclif/lib/util.js b/node_modules/oclif/lib/util.js
index f0d611d..92c49d9 100644
--- a/node_modules/oclif/lib/util.js
+++ b/node_modules/oclif/lib/util.js
@@ -101,7 +101,7 @@ const hash = async (algo, fp) => {
 exports.hash = hash;
 async function checkFor7Zip() {
     try {
-        await exec('7z');
+        await msysExec('7z', { stdio: [0, null, 2] });
     }
     catch (error) {
         const { code } = error;
@@ -116,3 +116,45 @@ function isEmpty(obj) {
     return Object.keys(obj).length === 0;
 }
 exports.isEmpty = isEmpty;
+
+
+// OSTYPE is 'msys' for MSYS 1.0 and for MSYS2, or 'cygwin' for Cygwin
+// but note that OSTYPE is not "exported" by default, so run: export OSTYPE=$OSTYPE
+// MSYSTEM is 'MINGW32' for MSYS 1.0, 'MSYS' for MSYS2, and undefined for Cygwin
+const isCygwin = process.env.OSTYPE === 'cygwin';
+const isMinGW = process.env.MSYSTEM && process.env.MSYSTEM.startsWith('MINGW');
+const isMSYS2 = process.env.MSYSTEM && process.env.MSYSTEM.startsWith('MSYS');
+const MSYSSHELLPATH = process.env.MSYSSHELLPATH ||
+    (isMSYS2 ? 'C:\\msys64\\usr\\bin\\bash.exe' :
+        (isMinGW ? 'C:\\MinGW\\msys\\1.0\\bin\\bash.exe' :
+            (isCygwin ? 'C:\\cygwin64\\bin\\bash.exe' : '/bin/sh')));
+
+exports.isCygwin = isCygwin;
+exports.isMinGW = isMinGW;
+exports.isMSYS2 = isMSYS2;
+console.error(`[debug] oclif MSYSSHELLPATH=${MSYSSHELLPATH} MSYSTEM=${process.env.MSYSTEM} OSTYPE=${process.env.OSTYPE} isMSYS2=${isMSYS2} isMingGW=${isMinGW} isCygwin=${isCygwin}`);
+
+/* Convert a Windows path like 'C:\tmp' to a MSYS path like '/c/tmp' */
+function toMsysPath(windowsPath) {
+    // 'c:\myfolder' -> '/c/myfolder' or '/cygdrive/c/myfolder'
+    let msysPath = windowsPath.replace(/\\/g, '/');
+    if (isMSYS2 || isMinGW) {
+        msysPath = msysPath.replace(/^([a-zA-Z]):/, '/$1');
+    } else if (isCygwin) {
+        msysPath = msysPath.replace(/^([a-zA-Z]):/, '/cygdrive/$1');
+    }
+    console.error(`[debug] oclif toMsysPath before="${windowsPath}" after="${msysPath}"`);
+    return msysPath;
+}
+exports.toMsysPath = toMsysPath;
+
+async function msysExec(cmd, options = {}) {
+    if (process.platform !== 'win32') {
+        return exec(cmd, options);
+    }
+    const sh = MSYSSHELLPATH;
+    const args = ['-c', cmd];
+    console.error(`[debug] oclif msysExec sh="${sh}" args=${JSON.stringify(args)} options=${JSON.stringify(options)}`);
+    return exec(`"${sh}" "${args.join('" "')}"`, options);
+}
+exports.msysExec = msysExec;
