diff --git a/node_modules/oclif/lib/commands/pack/macos.js b/node_modules/oclif/lib/commands/pack/macos.js
index bbb4d90..23f184d 100644
--- a/node_modules/oclif/lib/commands/pack/macos.js
+++ b/node_modules/oclif/lib/commands/pack/macos.js
@@ -238,7 +238,7 @@ the CLI should already exist in a directory named after the CLI that is the root
             if (process.env.OSX_KEYCHAIN)
                 args.push('--keychain', process.env.OSX_KEYCHAIN);
             args.push(dist);
-            await exec(`pkgbuild  ${args.join(' ')}`);
+            await exec(`pkgbuild  "${args.join('" "')}"`);
         };
         const arches = (0, util_1.uniq)(buildConfig.targets.filter((t) => t.platform === 'darwin').map((t) => t.arch));
         await Promise.all(arches.map((a) => build(a)));
diff --git a/node_modules/oclif/lib/commands/pack/win.js b/node_modules/oclif/lib/commands/pack/win.js
index 03d4f53..a55d27b 100644
--- a/node_modules/oclif/lib/commands/pack/win.js
+++ b/node_modules/oclif/lib/commands/pack/win.js
@@ -76,6 +76,12 @@ InstallDir "\$PROGRAMFILES${arch === 'x64' ? '64' : ''}\\${config.dirname}"
 ${customization}
 
 Section "${config.name} CLI \${VERSION}"
+  ; First remove any old client files.
+  ; (Remnants of old versions were causing CLI errors)
+  ; Initially tried running the Uninstall.exe, but was
+  ; unable to make script wait for completion (despite using _?)
+  DetailPrint "Removing files from previous version."
+  RMDir /r "$INSTDIR\\client"
   SetOutPath $INSTDIR
   File /r bin
   File /r client
diff --git a/node_modules/oclif/lib/tarballs/build.js b/node_modules/oclif/lib/tarballs/build.js
index c2015b3..4f2bafc 100644
--- a/node_modules/oclif/lib/tarballs/build.js
+++ b/node_modules/oclif/lib/tarballs/build.js
@@ -86,7 +86,8 @@ const copyCoreYarnFiles = async (yarnRootPath, workspacePath) => {
     await copyYarnDirectory('./.yarn/plugins/', yarnRootPath, workspacePath);
 };
 async function build(c, options = {}) {
-    const { config, xz } = c;
+    const { config, tmp, xz } = c;
+    console.error(`[debug] oclif c.root="${c.root}" c.workspace()="${c.workspace()}"`);
     const packCLI = async () => {
         const { stdout } = await exec('npm pack --unsafe-perm', { cwd: c.root });
         return path.join(c.root, stdout.trim().split('\n').pop());
@@ -106,6 +107,14 @@ async function build(c, options = {}) {
             (0, promises_1.rm)(path.join(c.workspace(), path.basename(tarball)), { recursive: true }),
             (0, fs_extra_1.remove)(path.join(c.workspace(), 'bin', 'run.cmd')),
         ]);
+        // rename the original balena-cli ./bin/balena entry point for oclif compatibility
+        await fs.move(path.join(c.workspace(), 'bin', 'balena'), path.join(c.workspace(), 'bin', 'run'));
+        // The oclif installers are a production installation, while the source
+        // `bin` folder may contain a `.fast-boot.json` file of a dev installation.
+        // This has previously led to issues preventing the CLI from starting, so
+        // delete `.fast-boot.json` (if any) from the destination folder.
+        await fs.promises.rm(path.join(c.workspace(), 'bin', '.fast-boot.json'));
+        
     };
     const updatePJSON = async () => {
         const pjsonPath = path.join(c.workspace(), 'package.json');
@@ -117,36 +126,21 @@ async function build(c, options = {}) {
         await (0, fs_extra_1.writeJSON)(pjsonPath, pjson, { spaces: 2 });
     };
     const addDependencies = async () => {
-        const yarnRoot = (0, find_yarn_workspace_root_1.default)(c.root) || c.root;
-        if (isYarnProject(yarnRoot)) {
-            await copyCoreYarnFiles(yarnRoot, c.workspace());
-            const { stdout } = await exec('yarn -v');
-            const yarnVersion = stdout.charAt(0);
-            if (yarnVersion === '1') {
-                await exec('yarn --no-progress --production --non-interactive', { cwd: c.workspace() });
-            }
-            else if (yarnVersion === '2') {
-                throw new Error('Yarn 2 is not supported yet. Try using Yarn 1, or Yarn 3');
-            }
-            else {
-                try {
-                    await exec('yarn workspaces focus --production', { cwd: c.workspace() });
-                }
-                catch (error) {
-                    if (error instanceof Error && error.message.includes('Command not found')) {
-                        throw new Error('Missing workspace tools. Run `yarn plugin import workspace-tools`.');
-                    }
-                    throw error;
-                }
-            }
-        }
-        else {
-            const lockpath = (0, node_fs_1.existsSync)(path.join(c.root, 'package-lock.json'))
-                ? path.join(c.root, 'package-lock.json')
-                : path.join(c.root, 'npm-shrinkwrap.json');
-            await (0, fs_extra_1.copy)(lockpath, path.join(c.workspace(), path.basename(lockpath)));
-            await exec('npm install --production', { cwd: c.workspace() });
-        }
+        const ws = c.workspace();
+        exec(`cd ${ws}`);
+        console.error(`[debug] oclif copying node_modules to "${ws}"`)
+        const source = path.join(c.root, 'node_modules');
+        if (process.platform === 'win32') {
+            await exec(`xcopy "${source}" "${ws}\\node_modules" /S /E /B /I /K /Q /Y`);
+        } else {
+            // use the shell's `cp` on macOS in order to preserve extended
+            // file attributes containing `codesign` digital signatures
+            await exec(`cp -pR "${source}" "${ws}"`);
+         }
+        console.error(`[debug] oclif running "npm prune --production" in "${ws}"`);
+        await exec('npm prune --production', { cwd: c.workspace() });
+        console.error(`[debug] oclif done`);
+
     };
     const pretarball = async () => {
         const pjson = await (0, fs_extra_1.readJSON)(path.join(c.workspace(), 'package.json'));
@@ -186,7 +180,8 @@ async function build(c, options = {}) {
             nodeVersion: c.nodeVersion,
             output: path.join(workspace, 'bin', 'node'),
             platform: target.platform,
-            tmp: path.join(config.root, 'tmp'),
+            tmp,
+            projectRootPath: c.root
         });
         if (options.pack === false)
             return;
diff --git a/node_modules/oclif/lib/tarballs/config.js b/node_modules/oclif/lib/tarballs/config.js
index 4b96bb6..f132ca9 100644
--- a/node_modules/oclif/lib/tarballs/config.js
+++ b/node_modules/oclif/lib/tarballs/config.js
@@ -41,7 +41,10 @@ async function gitSha(cwd, options = {}) {
 }
 exports.gitSha = gitSha;
 async function Tmp(config) {
-    const tmp = path.join(config.root, 'tmp');
+    const tmp = process.env.BUILD_TMP
+        ? path.join(process.env.BUILD_TMP, 'oclif')
+        : path.join(config.root, 'tmp');
+    console.error(`[debug] oclif tmp="${tmp}"`);
     await (0, promises_1.mkdir)(tmp, { recursive: true });
     return tmp;
 }
@@ -83,7 +86,7 @@ async function buildConfig(root, options = {}) {
         tmp,
         updateConfig,
         workspace(target) {
-            const base = path.join(config.root, 'tmp');
+            const base = tmp;
             if (target && target.platform)
                 return path.join(base, [target.platform, target.arch].join('-'), (0, upload_util_1.templateShortKey)('baseDir', { bin: config.bin }));
             return path.join(base, (0, upload_util_1.templateShortKey)('baseDir', { bin: config.bin }));
diff --git a/node_modules/oclif/lib/upload-util.js b/node_modules/oclif/lib/upload-util.js
index 61899a4..6637cb5 100644
--- a/node_modules/oclif/lib/upload-util.js
+++ b/node_modules/oclif/lib/upload-util.js
@@ -27,10 +27,10 @@ function templateShortKey(type, options) {
         baseDir: '<%- bin %>',
         deb: '<%- bin %>_<%- versionShaRevision %>_<%- arch %>.deb',
         macos: '<%- bin %>-v<%- version %>-<%- sha %>-<%- arch %>.pkg',
-        manifest: '<%- bin %>-v<%- version %>-<%- sha %>-<%- platform %>-<%- arch %>-buildmanifest',
-        unversioned: '<%- bin %>-<%- platform %>-<%- arch %><%- ext %>',
-        versioned: '<%- bin %>-v<%- version %>-<%- sha %>-<%- platform %>-<%- arch %><%- ext %>',
-        win32: '<%- bin %>-v<%- version %>-<%- sha %>-<%- arch %>.exe',
+        versioned: '<%- bin %>-v<%- version %>-<%- platform %>-<%- arch %><%- ext %>',
+        manifest: '<%- bin %>-v<%- version %>-<%- platform %>-<%- arch %>-buildmanifest',
+        macos: '<%- bin %>-v<%- version %>.pkg',
+        win32: '<%- bin %>-v<%- version %>-<%- arch %>.exe',
     };
     return template(templates[type])({ ...options });
 }
